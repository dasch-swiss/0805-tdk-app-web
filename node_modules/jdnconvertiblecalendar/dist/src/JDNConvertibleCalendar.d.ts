import { TypeDefinitionsModule } from './TypeDefinitions';
import JDN = TypeDefinitionsModule.JDN;
export declare module JDNConvertibleCalendarModule {
    /**
     * Represents an error that occurred when using `JDNConvertibleCalendarModule`.
     */
    class JDNConvertibleCalendarError extends Error {
        /**
         *
         * @param message description of the error.
         */
        constructor(message: string);
    }
    /**
     * Represents a calendar date (calendar agnostic).
     *
     * Assumes that every supported calendar
     * can be represented by a combination of year, month, and day.
     *
     */
    class CalendarDate {
        readonly year: number;
        readonly month: number;
        readonly day: number;
        readonly dayOfWeek?: number | undefined;
        readonly daytime?: number | undefined;
        /**
         *
         * Please note that this software uses the (astronomical) convention that BCE dates are represented as negative years and that the year zero (0) is used.
         * The year 1 BCE must be indicated as year 0, and the year 2 BCE corresponds to -1 etc.
         *
         * @param year year of the given date.
         * @param month month of the given date.
         * @param day day of the given date (day of month, 1 based index).
         * @param dayOfWeek day of week of the given date (0 based index), if any.
         * @param daytime time of the day (0 - 0.9…), if any. 0 refers to midnight, 0.5 to noon, 0.9… to midnight of the same day. 1 would already refer to the next day and is thus not valid.
         */
        constructor(year: number, month: number, day: number, dayOfWeek?: number | undefined, daytime?: number | undefined);
    }
    /**
     * Represents a period as two calendar dates.
     */
    class CalendarPeriod {
        readonly periodStart: CalendarDate;
        readonly periodEnd: CalendarDate;
        /**
         *
         * @param periodStart start of the period.
         * @param periodEnd End of the period.
         */
        constructor(periodStart: CalendarDate, periodEnd: CalendarDate);
    }
    /**
     * Represents a period as two JDNs.
     */
    class JDNPeriod {
        readonly periodStart: JDN;
        readonly periodEnd: JDN;
        /**
         * Indicates if the date is exact (day precision).
         */
        readonly exactDate: Boolean;
        /**
         *
         * @param periodStart start of the period.
         * @param periodEnd End of the period.
         */
        constructor(periodStart: JDN, periodEnd: JDN);
    }
    /**
     * Abstract class representing any calendar
     * that can be converted from and to a Julian Day.
     */
    abstract class JDNConvertibleCalendar {
        /**
         * Constant for the Gregorian calendar.
         */
        protected static readonly gregorian: string;
        /**
         * Constant for the Julian calendar.
         */
        protected static readonly julian: string;
        /**
         * Supported calendars (to be extended when new subclasses are implemented).
         */
        static readonly supportedCalendars: string[];
        /**
         * Calendar name of a subclass of `JDNConvertibleCalendar`.
         */
        abstract readonly calendarName: string;
        /**
         * Indicates how many months a year has in a specific calendar.
         */
        abstract readonly monthsInYear: number;
        /**
         * Indicates if the year 0 exists in a specific calendar.
         */
        abstract readonly yearZeroExists: Boolean;
        /**
         * Start of a given date in a specific calendar.
         */
        protected calendarStart: CalendarDate;
        /**
         * End of a given date in a specific calendar.
         */
        protected calendarEnd: CalendarDate;
        /**
         * Indicates if the date is exact (start and end of the given period are equal).
         */
        protected exactDate: Boolean;
        /**
         * Start of given date as JDN.
         */
        protected jdnStart: JDN;
        /**
         * End of given date as JDN.
         */
        protected jdnEnd: JDN;
        /**
         * Converts a given JDN to a calendar date.
         * This method has to be implemented for each subclass
         * (specific calendar).
         *
         * Attention: depending on the conventions used, there may be a year 0 or not.
         * This depends on the implementation of this conversion function.
         *
         * @param jdn JDN to be converted to a calendar date.
         * @returns calendar date created from given JDN.
         */
        protected abstract JDNToCalendar(jdn: JDN): CalendarDate;
        /**
         * Converts a given calendar date to JDN.
         * This method has to be implemented for each subclass
         * (specific calendar).
         *
         * Attention: depending on the conventions used, there may be a year 0 or not.
         * This depends on the implementation of this conversion function.
         *
         * @param date calendar date to be converted to a JDN.
         * @returns JDN created from given calendar date.
         */
        protected abstract calendarToJDN(date: CalendarDate): JDN;
        /**
         * Calculates the day of week of a given JDN.
         *
         * @param jdn JDN for which the day of the week is to be calculated.
         * @returns day of week of the given JDN (as a 0-based index).
         */
        protected abstract dayOfWeekFromJDN(jdn: JDN): number;
        /**
         * Calculates number of days for the month of the given date.
         *
         * The given date is expected to be of the same calendar as the instance the method is called on.
         *
         * @param date given date.
         * @returns number of days in month of given date.
         */
        daysInMonth(date: CalendarDate): number;
        /**
         * Converts the given JDN period to a calendar period and stores it.
         *
         * This method makes sure that JDNs and calendar dates are in sync. This method has no return value,
         * it manipulates `this.calendarStart`, and `this.calendarEnd` instead.
         *
         * Do not manipulate members `this.exactDate`, `this.jdnStart`, `this.jdnEnd`, `this.calendarStart`, and `this.calendarEnd` directly,
         * use this method instead.
         *
         * @param jdnPeriod the period defined by JDNs to be converted to a calendar period.
         */
        protected convertJDNPeriodToCalendarPeriod(jdnPeriod: JDNPeriod): void;
        /**
         * This constructor is inherited by all subclasses (no implementation in subclass required).
         *
         * The constructor supports two signatures:
         * - period: JDNPeriod creates a date from the given `JDNPeriod` (two JDNs)
         * - period: CalendarPeriod creates a date from the given `CalendarPeriod` (two calendar dates)
         */
        constructor(period: JDNPeriod);
        constructor(period: CalendarPeriod);
        /**
         * Returns the given period as two calendar dates.
         *
         * @returns period consisting of two calendar dates.
         */
        toCalendarPeriod(): CalendarPeriod;
        /**
         * Converts an instance of `JDNConvertibleCalendar` to a `JDNPeriod`.
         *
         * @returns period consisting of two JDNs.
         */
        toJDNPeriod(): JDNPeriod;
        /**
         * Converts from one calendar into another.
         *
         * To be extended when new subclasses are added.
         *
         * @param {"Gregorian" | "Julian"} toCalendarType calendar to convert to.
         * @returns instance of target calendar (subclass of `JDNConvertibleCalendar`).
         */
        convertCalendar(toCalendarType: 'Gregorian' | 'Julian'): JDNConvertibleCalendar;
        /**
         * Transposes the current period by the given number of days.
         *
         * @param days the number of days that the current period will be shifted.
         */
        transposePeriodByDay(days: number): void;
        /**
         * Transposes the current period by the given number of years.
         *
         * This method is not accurate in the arithmetical sense: it tries to fit the given day in the month of the new year.
         * If this is not possible, it takes the last day of the new month (e.g., February 29 will become the last possible day of February).
         *
         * @param years the number of years that the current period will be shifted.
         */
        transposePeriodByYear(years: number): void;
        /**
         * Converts the given calendar date to a new one, shifting the months by the given number.
         *
         * @param calendarDate the given calendar date.
         * @param months the number of months to shift.
         * @returns calendar transposed by the given number of months.
         */
        protected handleMonthTransposition(calendarDate: CalendarDate, months: number): CalendarDate;
        /**
         * Transposes the current period by the given number of months.
         *
         * This method is not accurate in the arithmetical sense: it tries to fit the given day in the new month.
         * If this is not possible, it takes the last day of the new month (e.g., January 31 will become the last possible day of February).
         *
         * @param months the number of months that the current period will be shifted.
         */
        transposePeriodByMonth(months: number): void;
    }
    /**
     * Represents a Gregorian calendar date.
     */
    class GregorianCalendarDate extends JDNConvertibleCalendar {
        readonly calendarName: string;
        readonly monthsInYear: number;
        readonly yearZeroExists: boolean;
        protected JDNToCalendar(jdn: JDN): CalendarDate;
        protected calendarToJDN(date: CalendarDate): JDN;
        protected dayOfWeekFromJDN(jdn: number): number;
    }
    /**
     * Represents a Julian calendar date.
     */
    class JulianCalendarDate extends JDNConvertibleCalendar {
        readonly calendarName: string;
        readonly monthsInYear: number;
        readonly yearZeroExists: boolean;
        protected JDNToCalendar(jdn: JDN): CalendarDate;
        protected calendarToJDN(date: CalendarDate): JDN;
        protected dayOfWeekFromJDN(jdn: JDN): number;
    }
}
