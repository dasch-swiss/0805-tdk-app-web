import { Component, Input } from '@angular/core';
import { Location } from '@angular/common';
import { ActivatedRoute, Router } from '@angular/router';
import defaultMsgs from '../../assets/i18n/statusMsg.json';
/**
 * @ignore
 * Data type for messages
 */
export class KuiMessageData {
}
/**
 * Message component to handle notes, warning and error messages.
 * If you set the paramater `[short]="true"` it shows a smaller message. It can be used to give feedbacks in a form e.g. update process: show success or error message.
 *
 */
export class MessageComponent {
    constructor(_router, _location, _activatedRoute) {
        this._router = _router;
        this._location = _location;
        this._activatedRoute = _activatedRoute;
        /**
         * Message type: KuiMessageData or ApiServiceError
         *
         * @param  {KuiMessageData | ApiServiceError} message This type needs at least a status number (0-511). In this case, or if type is ApiServiceError, it takes the default status messages from the list of HTTP status codes (https://en.wikipedia.org/wiki/List_of_HTTP_status_codes)
         */
        this.message = new KuiMessageData();
        /**
         * Show short message only
         *
         * @param  {boolean} [short]
         */
        this.short = false;
        this.isLoading = true;
        this.showLinks = false;
        // disable message
        this.disable = false;
        /*
         * @ignore
         * default link list, which will be used in message content to give a user some possibilities
         * what he can do in the case of an error
         *
         */
        this.links = {
            title: 'You have the following possibilities now',
            list: [
                {
                    label: 'go to the start page',
                    route: '/',
                    icon: 'keyboard_arrow_right'
                },
                {
                    label: 'try to login',
                    route: '/login',
                    icon: 'keyboard_arrow_right'
                },
                {
                    label: 'go back',
                    route: '<--',
                    icon: 'keyboard_arrow_left'
                }
            ]
        };
        this.footnote = {
            text: 'If you think it\'s a mistake, please',
            team: {
                knora: '<a href=\'https://github.com/dhlab-basel/knora\' target=\'_blank\'> inform the Knora team </a>',
                salsah: '<a href=\'https://github.com/dhlab-basel/salsah\' target=\'_blank\'> inform the Salsah developers </a>'
            }
        };
    }
    ngOnInit() {
        this.statusMsg = defaultMsgs;
        if (!this.message) {
            this._activatedRoute.data.subscribe((data) => {
                this.message.status = data.status;
            });
        }
        this.message = this.setMessage(this.message);
        this.isLoading = false;
    }
    setMessage(msg) {
        const tmpMsg = {};
        const s = msg.status === 0 ? 503 : msg.status;
        tmpMsg.status = s;
        tmpMsg.route = msg.route;
        tmpMsg.statusMsg = msg.statusMsg;
        tmpMsg.statusText = msg.statusText;
        tmpMsg.route = msg.route;
        tmpMsg.footnote = msg.footnote;
        switch (true) {
            case s > 0 && s < 300:
                // the message is a note
                tmpMsg.type = 'note';
                // console.log('the message is a note');
                break;
            case s >= 300 && s < 400:
                // the message is a warning
                tmpMsg.type = 'warning';
                // console.log('the message is a warning');
                break;
            case s >= 400 && s < 500:
                // the message is a client side (app) error
                // console.error('the message is a client side (app) error', s);
                tmpMsg.type = 'error';
                tmpMsg.statusMsg =
                    msg.statusMsg !== undefined
                        ? msg.statusMsg
                        : this.statusMsg[s].message;
                tmpMsg.statusText =
                    msg.statusText !== undefined
                        ? msg.statusText
                        : this.statusMsg[s].description;
                tmpMsg.footnote =
                    this.footnote.text + ' ' + this.footnote.team.knora;
                this.showLinks = true;
                break;
            case s >= 500 && s < 600:
                // the message is a server side (api) error
                // console.error('the message is a server side (api) error');
                tmpMsg.type = 'error';
                tmpMsg.statusMsg =
                    msg.statusMsg !== undefined
                        ? msg.statusMsg
                        : this.statusMsg[s].message;
                tmpMsg.statusText =
                    msg.statusText !== undefined
                        ? msg.statusText
                        : this.statusMsg[s].description;
                tmpMsg.footnote =
                    this.footnote.text + ' ' + this.footnote.team.knora;
                this.showLinks = false;
                break;
            default:
                // no default configuration?
                break;
        }
        return tmpMsg;
    }
    goToLocation(route) {
        if (route === '<--') {
            this._location.back();
        }
        else {
            this._router.navigate([route]);
        }
    }
    closeMessage() {
        this.disable = !this.disable;
    }
}
MessageComponent.decorators = [
    { type: Component, args: [{
                selector: 'kui-message',
                template: "<mat-card *ngIf=\"!short\" class=\"fix-width kui-message\" [ngClass]=\"'kui-' + message?.type\">\n\n  <mat-card-subtitle class=\"message-subtitle\">\n      <span class=\"left\">{{message?.type | uppercase }} {{message?.status}} | {{message?.statusMsg}}</span>\n      <mat-icon class=\"right\">{{message?.type}}</mat-icon>\n  </mat-card-subtitle>\n\n  <mat-card-title class=\"message-title\" [innerHtml]=\"message?.statusText\"></mat-card-title>\n\n  <mat-card-content class=\"message-content\">\n      <mat-list *ngIf=\"message?.route\">\n          <mat-list-item>\n              <a [href]=\"message?.route\" target=\"_blank\">\n                  &rarr; {{message?.route}}\n              </a>\n          </mat-list-item>\n      </mat-list>\n\n      <mat-list *ngIf=\"showLinks\">\n          <p>{{links.title}}</p>\n          <mat-list-item *ngFor=\"let item of links.list\" class=\"link\" (click)=\"goToLocation(item.route)\">\n              <mat-icon mat-list-icon>{{item.icon}}</mat-icon>\n              <p mat-line>{{item.label}}</p>\n          </mat-list-item>\n      </mat-list>\n\n\n\n  </mat-card-content>\n\n  <mat-card-footer class=\"message-footnote\" [innerHtml]=\"message?.footnote\"></mat-card-footer>\n\n</mat-card>\n\n\n<mat-card *ngIf=\"short && !disable\" class=\"fix-width kui-short-message\" [ngClass]=\"'kui-' + message?.type\">\n\n  <div class=\"kui-panel\">\n      <span class=\"kui-short-message-text\">\n          {{message?.statusText}}\n      </span>\n      <span class=\"fill-remaining-space\"></span>\n      <button mat-icon-button (click)=\"closeMessage()\">\n          <mat-icon>close</mat-icon>\n      </button>\n  </div>\n\n</mat-card>",
                styles: [".kui-panel{display:flex;box-sizing:border-box;flex-direction:row;white-space:nowrap}.fill-remaining-space{flex-basis:auto;flex-grow:1;flex-shrink:1}.kui-error{background-color:rgba(244,67,54,.5)}.kui-warning{background-color:rgba(255,196,0,.5)}.kui-hint,.kui-note{background-color:rgba(0,105,92,.4)}.kui-error,.kui-hint,.kui-note,.kui-warning{margin:12px auto;max-width:640px}.kui-error .message-subtitle,.kui-hint .message-subtitle,.kui-note .message-subtitle,.kui-warning .message-subtitle{padding-bottom:12px}.kui-error .message-subtitle .left,.kui-hint .message-subtitle .left,.kui-note .message-subtitle .left,.kui-warning .message-subtitle .left{float:left;left:16px;position:absolute;text-align:left}.kui-error .message-subtitle .right,.kui-hint .message-subtitle .right,.kui-note .message-subtitle .right,.kui-warning .message-subtitle .right{float:right;right:16px;position:absolute;text-align:right}.kui-error .message-title,.kui-hint .message-title,.kui-note .message-title,.kui-warning .message-title{padding-top:12px}.kui-error .message-content,.kui-hint .message-content,.kui-note .message-content,.kui-warning .message-content{margin-bottom:48px;margin-top:48px}.kui-error .message-content .link,.kui-hint .message-content .link,.kui-note .message-content .link,.kui-warning .message-content .link{cursor:pointer}.kui-error .message-footnote,.kui-hint .message-footnote,.kui-note .message-footnote,.kui-warning .message-footnote{padding:24px}.kui-short-message .kui-short-message-text{font-weight:bolder;text-align:center}"]
            }] }
];
/** @nocollapse */
MessageComponent.ctorParameters = () => [
    { type: Router },
    { type: Location },
    { type: ActivatedRoute }
];
MessageComponent.propDecorators = {
    message: [{ type: Input }],
    short: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,