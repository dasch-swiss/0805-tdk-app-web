import { Injectable } from '@angular/core';
import { catchError, map } from 'rxjs/operators';
import { ApiService } from '../api.service';
import { GroupsResponse, UserResponse, UsersResponse } from '../../declarations/';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../../core.module";
/**
 * This service uses the Knora admin API and handles all user data.
 */
export class UsersService extends ApiService {
    // ------------------------------------------------------------------------
    // GET
    // ------------------------------------------------------------------------
    /**
     * Returns a list of all users.
     *
     * @returns Observable<User[]>
     */
    getAllUsers() {
        return this.httpGet('/admin/users').pipe(map((result) => result.getBody(UsersResponse).users), catchError(this.handleJsonError));
    }
    /**
     * Get user by username, email or by iri.
     * @ignore
     *
     * @param  {string} identifier username, email or by iri
     * @param  {String} identifierType
     * @returns Observable<User>
     */
    getUser(identifier, identifierType) {
        const path = '/admin/users/' + identifierType + '/' + encodeURIComponent(identifier);
        return this.httpGet(path).pipe(map((result) => result.getBody(UserResponse).user), catchError(this.handleJsonError));
    }
    /**
     * Get user by IRI
     *
     * @param  {string} iri
     * @returns Observable<User>
     */
    getUserByIri(iri) {
        return this.getUser(iri, 'iri');
    }
    /**
     * Get user by email
     *
     * @param  {string} email
     * @returns Observable<User>
     */
    getUserByEmail(email) {
        return this.getUser(email, 'email');
    }
    /**
     * Get user by username.
     *
     * @param  {string} username
     * @returns Observable<User>
     */
    getUserByUsername(username) {
        return this.getUser(username, 'username');
    }
    /**
     * Get all groups, where the user is member of
     *
     * @param  {string} userIri
     * @returns Observable<Group[]>
     */
    getUsersGroupMemberships(userIri) {
        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/group-memberships';
        return this.httpGet(path).pipe(map((result) => result.getBody(GroupsResponse).groups), catchError(this.handleJsonError));
    }
    // ------------------------------------------------------------------------
    // POST
    // ------------------------------------------------------------------------
    /**
     * Create new user.
     *
     * @param {any} data
     * @returns Observable<User>
     */
    createUser(data) {
        const path = '/admin/users';
        return this.httpPost(path, data).pipe(map((result) => result.getBody(UserResponse).user), catchError(this.handleJsonError));
    }
    /**
     * Add user to a project.
     *
     * @param {string} userIri
     * @param {string} projectIri
     * @returns Observable<User>
     */
    addUserToProject(userIri, projectIri) {
        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/project-memberships/' + encodeURIComponent(projectIri);
        return this.httpPost(path).pipe(map((result) => result.getBody(UserResponse).user), catchError(this.handleJsonError));
    }
    /**
     * Remove user from project.
     *
     * @param {string} userIri
     * @param {string} projectIri
     * @returns Observable<User>
     */
    removeUserFromProject(userIri, projectIri) {
        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/project-memberships/' + encodeURIComponent(projectIri);
        return this.httpDelete(path).pipe(map((result) => result.getBody(UserResponse).user), catchError(this.handleJsonError));
    }
    /**
     * Add user to the admin group of a project.
     *
     * @param {string} userIri
     * @param {string} projectIri
     * @returns Observable<User>
     */
    addUserToProjectAdmin(userIri, projectIri) {
        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/project-admin-memberships/' + encodeURIComponent(projectIri);
        return this.httpPost(path).pipe(map((result) => result.getBody(UserResponse).user), catchError(this.handleJsonError));
    }
    /**
     * Delete user from the admin group of a project.
     *
     * @param {string} userIri
     * @param {string} projectIri
     * @returns Observable<User>
     */
    removeUserFromProjectAdmin(userIri, projectIri) {
        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/project-admin-memberships/' + encodeURIComponent(projectIri);
        return this.httpDelete(path).pipe(map((result) => result.getBody(UserResponse).user), catchError(this.handleJsonError));
    }
    /**
     * Add user to project specific group
     *
     * @param {string} userIri
     * @param {string} groupIri
     * @returns Observable<User>
     */
    addUserToGroup(userIri, groupIri) {
        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/group-memberships/' + encodeURIComponent(groupIri);
        return this.httpPost(path).pipe(map((result) => result.getBody(UserResponse).user), catchError(this.handleJsonError));
    }
    /**
     * remove user from project specific group
     *
     * @param {string} userIri
     * @param {string} groupIri
     * @returns Observable<User>
     */
    removeUserFromGroup(userIri, groupIri) {
        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/group-memberships/' + encodeURIComponent(groupIri);
        return this.httpDelete(path).pipe(map((result) => result.getBody(UserResponse).user), catchError(this.handleJsonError));
    }
    // ------------------------------------------------------------------------
    // PUT
    // ------------------------------------------------------------------------
    /**
     * Add user to the admin system.
     *
     * @param {string} userIri
     * @returns Observable<User>
     */
    addUserToSystemAdmin(userIri) {
        const data = {
            'newSystemAdminMembershipStatus': true
        };
        return this.updateUserSystemAdmin(userIri, data);
    }
    /**
     * Remove user from the admin system.
     * @param {string} userIri
     * @returns Observable<User>
     */
    removeUserFromSystemAdmin(userIri) {
        const data = {
            'newSystemAdminMembershipStatus': false
        };
        return this.updateUserSystemAdmin(userIri, data);
    }
    /**
     * Update user system admin membership
     * @ignore
     *
     * @param {string} userIri
     * @param {any} data
     *
     * @returns Observable<User>
     */
    updateUserSystemAdmin(userIri, data) {
        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/SystemAdmin';
        return this.httpPut(path, data).pipe(map((result) => result.getBody(UserResponse).user), catchError(this.handleJsonError));
    }
    /**
     * Activate user.
     *
     * @param {string} userIri
     * @returns Observable<User>
     */
    activateUser(userIri) {
        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/Status';
        const data = {
            status: true
        };
        return this.httpPut(path, data).pipe(map((result) => result.getBody(UserResponse).user), catchError(this.handleJsonError));
    }
    /**
     * Update own password.
     *
     * @param {string} userIri
     * @param {string} oldPassword
     * @param {string} newPassword
     * @returns Observable<User>
     */
    updateOwnPassword(userIri, oldPassword, newPassword) {
        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/Password';
        const data = {
            newPassword: newPassword,
            requesterPassword: oldPassword
        };
        return this.httpPut(path, data).pipe(map((result) => result.getBody(UserResponse).user), catchError(this.handleJsonError));
    }
    /**
     * Update password of another user (not own).
     *
     * @param {string} userIri
     * @param {string} requesterPassword
     * @param {string} newPassword
     * @returns Observable<User>
     */
    updateUsersPassword(userIri, requesterPassword, newPassword) {
        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/Password';
        const data = {
            newPassword: newPassword,
            requesterPassword: requesterPassword
        };
        return this.httpPut(path, data).pipe(map((result) => result.getBody(UserResponse).user), catchError(this.handleJsonError));
    }
    /**
     * Update basic user information: given name, family name
     * @param userIri
     * @param data
     * @returns Observable<User>
     */
    updateBasicUserInformation(userIri, data) {
        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/BasicUserInformation';
        return this.httpPut(path, data).pipe(map((result) => result.getBody(UserResponse).user), catchError(this.handleJsonError));
    }
    // ------------------------------------------------------------------------
    // DELETE
    // ------------------------------------------------------------------------
    /**
     * Delete / deactivate user.
     *
     * @param {string} userIri
     * @returns Observable<User>
     */
    deleteUser(userIri) {
        const path = '/admin/users/iri/' + encodeURIComponent(userIri);
        return this.httpDelete(path).pipe(map((result) => result.getBody(UserResponse).user), catchError(this.handleJsonError));
    }
}
UsersService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
UsersService.ngInjectableDef = i0.defineInjectable({ factory: function UsersService_Factory() { return new UsersService(i0.inject(i1.HttpClient), i0.inject(i2.KuiCoreConfigToken)); }, token: UsersService, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,