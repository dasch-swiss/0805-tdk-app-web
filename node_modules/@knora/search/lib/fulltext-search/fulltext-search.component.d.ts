import { ElementRef, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { Project, ProjectsService } from '@knora/core';
import { MatMenuTrigger } from '@angular/material';
export interface PrevSearchItem {
    projectIri?: string;
    projectLabel?: string;
    query: string;
}
/**
 * Full-text search performs queries including one or more terms or phrases and returns data that
 match search conditions. The asterisk * can be used as a wildcard symbol.
 */
export declare class FulltextSearchComponent implements OnInit {
    private _route;
    private _router;
    private _projectsService;
    /**
     *
     * @param  {string} route Route to navigate after search. This route path should contain a component for search results.
     */
    route: string;
    /**
     *
     * @param  {boolean} [projectfilter] If true it shows the selection of projects to filter by one of them
     */
    projectfilter?: boolean;
    /**
     *
     * @param  {string} [filterbyproject] If your full-text search should be filtered by one project, you can define it with project iri in the parameter filterbyproject.
     */
    filterbyproject?: string;
    /**
     * @ignore
     * input field for full-text search
     *
     * @param  {} 'search'
     * @param  {ElementRef} searchField
     */
    searchField: ElementRef;
    /**
     * @ignore
     * mat menu: after select a project, the focus should switch to the input field
     *
     * @param  {} 'btnToSelectProject'
     * @param  {MatMenuTrigger} selectProject
     */
    selectProject: MatMenuTrigger;
    searchQuery: string;
    showSimpleSearch: boolean;
    searchPanelFocus: boolean;
    prevSearch: PrevSearchItem[];
    focusOnSimple: string;
    searchLabel: string;
    projects: Project[];
    projectLabel: string;
    projectIri: string;
    error: any;
    constructor(_route: ActivatedRoute, _router: Router, _projectsService: ProjectsService);
    ngOnInit(): void;
    /**
     * Do search on press Enter, close search menu on Escape
     * @ignore
     *
     * @param search_ele
     * @param event
     */
    onKey(search_ele: HTMLElement, event: any): void;
    /**
     * Realise a simple search
     * @ignore
     *
     */
    doSearch(): void;
    /**
     * Reset the search: close the search menu; clean the input field
     * @ignore
     *
     * @param {HTMLElement} search_ele
     */
    resetSearch(search_ele: HTMLElement): void;
    /**
     * Switch according to the focus between simple or extended search
     * @ignore
     *
     */
    toggleMenu(): void;
    /**
     * Set simple focus to active
     * @ignore
     *
     */
    setFocus(): void;
    /**
     * Realise a previous search
     * @ignore
     *
     * @param {string} prevSearch
     */
    doPrevSearch(prevSearch: PrevSearchItem): void;
    /**
     * Reset previous searches - the whole previous search or specific item by name
     * @ignore
     *
     * @param {string} prevSearch term of the search
     */
    resetPrevSearch(prevSearch?: PrevSearchItem): void;
    /**
     * get all projects for "filter by project" selection
     * @ignore
     */
    getAllProjects(): void;
    /**
     * get project information in case of @Input project
     * @ignore
     *
     * @param {string} iri
     */
    getProject(iri: string): void;
    /**
     * set the project to use and store it in the local storage
     * @ignore
     *
     * @param {Project} project
     */
    setProject(project?: Project): void;
    /**
     * switch focus from select-project-menu to input field
     * @ignore
     */
    changeFocus(): void;
}
