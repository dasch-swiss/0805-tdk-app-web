import * as tslib_1 from "tslib";
import { animate, state, style, transition, trigger } from '@angular/animations';
import { Component, ElementRef, Input, ViewChild } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { ProjectsService } from '@knora/core';
import { MatMenuTrigger } from '@angular/material';
/**
 * Full-text search performs queries including one or more terms or phrases and returns data that
 match search conditions. The asterisk * can be used as a wildcard symbol.
 */
var FulltextSearchComponent = /** @class */ (function () {
    function FulltextSearchComponent(_route, _router, _projectsService) {
        this._route = _route;
        this._router = _router;
        this._projectsService = _projectsService;
        /**
         *
         * @param  {string} route Route to navigate after search. This route path should contain a component for search results.
         */
        this.route = '/search';
        /**
         *
         * @param  {boolean} [projectfilter] If true it shows the selection of projects to filter by one of them
         */
        this.projectfilter = false;
        this.showSimpleSearch = true;
        this.searchPanelFocus = false;
        this.prevSearch = JSON.parse(localStorage.getItem('prevSearch'));
        this.focusOnSimple = 'inactive';
        this.searchLabel = 'Search';
        this.projectLabel = 'Filter project';
    }
    FulltextSearchComponent.prototype.ngOnInit = function () {
        if (this.filterbyproject) {
            this.getProject(this.filterbyproject);
        }
        if (this.projectfilter) {
            this.getAllProjects();
            if (localStorage.getItem('currentProject') !== null) {
                this.setProject(JSON.parse(localStorage.getItem('currentProject')));
            }
        }
    };
    /**
     * Do search on press Enter, close search menu on Escape
     * @ignore
     *
     * @param search_ele
     * @param event
     */
    FulltextSearchComponent.prototype.onKey = function (search_ele, event) {
        this.focusOnSimple = 'active';
        this.prevSearch = JSON.parse(localStorage.getItem('prevSearch'));
        if (this.searchQuery &&
            (event.key === 'Enter' ||
                event.keyCode === 13 ||
                event.which === 13)) {
            this.doSearch();
        }
        if (event.key === 'Escape' ||
            event.keyCode === 27 ||
            event.which === 27) {
            this.resetSearch(search_ele);
        }
    };
    /**
     * Realise a simple search
     * @ignore
     *
     */
    FulltextSearchComponent.prototype.doSearch = function () {
        var e_1, _a;
        if (this.searchQuery !== undefined && this.searchQuery !== null) {
            this.toggleMenu();
            if (this.projectIri !== undefined) {
                this._router.navigate([
                    this.route +
                        '/fulltext/' +
                        this.searchQuery +
                        '/' +
                        encodeURIComponent(this.projectIri)
                ]);
            }
            else {
                this._router.navigate([
                    this.route + '/fulltext/' + this.searchQuery
                ]);
            }
            // this._router.navigate(['/search/fulltext/' + this.searchQuery], { relativeTo: this._route });
            // push the search query into the local storage prevSearch array (previous search)
            // to have a list of recent search requests
            var existingPrevSearch = JSON.parse(localStorage.getItem('prevSearch'));
            if (existingPrevSearch === null) {
                existingPrevSearch = [];
            }
            var i = 0;
            try {
                for (var existingPrevSearch_1 = tslib_1.__values(existingPrevSearch), existingPrevSearch_1_1 = existingPrevSearch_1.next(); !existingPrevSearch_1_1.done; existingPrevSearch_1_1 = existingPrevSearch_1.next()) {
                    var entry = existingPrevSearch_1_1.value;
                    // remove entry, if exists already
                    if (this.searchQuery === entry.query && this.projectIri === entry.projectIri) {
                        existingPrevSearch.splice(i, 1);
                    }
                    i++;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (existingPrevSearch_1_1 && !existingPrevSearch_1_1.done && (_a = existingPrevSearch_1.return)) _a.call(existingPrevSearch_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            // A search value is expected to have at least length of 3
            if (this.searchQuery.length > 2) {
                var currentQuery = {
                    query: this.searchQuery
                };
                if (this.projectIri) {
                    currentQuery = {
                        projectIri: this.projectIri,
                        projectLabel: this.projectLabel,
                        query: this.searchQuery
                    };
                }
                existingPrevSearch.push(currentQuery);
                localStorage.setItem('prevSearch', JSON.stringify(existingPrevSearch));
            }
        }
        else {
            // search_ele.focus();
            this.searchField.nativeElement.focus();
            this.prevSearch = JSON.parse(localStorage.getItem('prevSearch'));
        }
    };
    /**
     * Reset the search: close the search menu; clean the input field
     * @ignore
     *
     * @param {HTMLElement} search_ele
     */
    FulltextSearchComponent.prototype.resetSearch = function (search_ele) {
        this.searchQuery = null;
        search_ele.focus();
        this.focusOnSimple = 'inactive';
        this.searchPanelFocus = !this.searchPanelFocus;
    };
    /**
     * Switch according to the focus between simple or extended search
     * @ignore
     *
     */
    FulltextSearchComponent.prototype.toggleMenu = function () {
        this.prevSearch = JSON.parse(localStorage.getItem('prevSearch'));
        this.focusOnSimple =
            this.focusOnSimple === 'active' ? 'inactive' : 'active';
        this.showSimpleSearch = true;
    };
    /**
     * Set simple focus to active
     * @ignore
     *
     */
    FulltextSearchComponent.prototype.setFocus = function () {
        this.prevSearch = JSON.parse(localStorage.getItem('prevSearch'));
        this.focusOnSimple = 'active';
        this.searchPanelFocus = !this.searchPanelFocus;
    };
    /**
     * Realise a previous search
     * @ignore
     *
     * @param {string} prevSearch
     */
    FulltextSearchComponent.prototype.doPrevSearch = function (prevSearch) {
        this.searchQuery = prevSearch.query;
        if (prevSearch.projectIri !== undefined) {
            this.projectIri = prevSearch.projectIri;
            this.projectLabel = prevSearch.projectLabel;
            this._router.navigate([
                this.route +
                    '/fulltext/' +
                    this.searchQuery +
                    '/' +
                    encodeURIComponent(prevSearch.projectIri)
            ]);
        }
        else {
            this.projectIri = undefined;
            this.projectLabel = 'Filter project';
            this._router.navigate([
                this.route + '/fulltext/' + this.searchQuery
            ]);
        }
        this.toggleMenu();
    };
    /**
     * Reset previous searches - the whole previous search or specific item by name
     * @ignore
     *
     * @param {string} prevSearch term of the search
     */
    FulltextSearchComponent.prototype.resetPrevSearch = function (prevSearch) {
        if (prevSearch) {
            // delete only this item with the name ...
            var i = this.prevSearch.indexOf(prevSearch);
            this.prevSearch.splice(i, 1);
            localStorage.setItem('prevSearch', JSON.stringify(this.prevSearch));
        }
        else {
            // delete the whole "previous search" array
            localStorage.removeItem('prevSearch');
        }
        this.prevSearch = JSON.parse(localStorage.getItem('prevSearch'));
    };
    /**
     * get all projects for "filter by project" selection
     * @ignore
     */
    FulltextSearchComponent.prototype.getAllProjects = function () {
        var _this = this;
        this._projectsService.getAllProjects().subscribe(function (projects) {
            _this.projects = projects;
            // this.loadSystem = false;
            if (localStorage.getItem('currentProject') !== null) {
                _this.projectLabel = JSON.parse(localStorage.getItem('currentProject')).shortname;
            }
        }, function (error) {
            console.error(error);
            _this.error = error;
        });
    };
    /**
     * get project information in case of @Input project
     * @ignore
     *
     * @param {string} iri
     */
    FulltextSearchComponent.prototype.getProject = function (iri) {
        var _this = this;
        this._projectsService.getProjectByIri(iri).subscribe(function (project) {
            _this.setProject(project);
        }, function (error) {
            console.error(error);
        });
    };
    /**
     * set the project to use and store it in the local storage
     * @ignore
     *
     * @param {Project} project
     */
    FulltextSearchComponent.prototype.setProject = function (project) {
        if (!project) {
            // set default project: all
            this.projectLabel = 'Filter project';
            this.projectIri = undefined;
            localStorage.removeItem('currentProject');
        }
        else {
            // set current project shortname and id
            this.projectLabel = project.shortname;
            this.projectIri = project.id;
            localStorage.setItem('currentProject', JSON.stringify(project));
        }
    };
    /**
     * switch focus from select-project-menu to input field
     * @ignore
     */
    FulltextSearchComponent.prototype.changeFocus = function () {
        this.selectProject.closeMenu();
        this.searchField.nativeElement.focus();
    };
    FulltextSearchComponent.decorators = [
        { type: Component, args: [{
                    selector: 'kui-fulltext-search',
                    template: "<div class=\"search-bar-elements\">\n\n\n    <div class=\"fulltext-search-bar\" [class.active]=\"searchPanelFocus\" [class.with-project-filter]=\"projectfilter && !error && projects?.length > 0\">\n        <!-- do not show the project filter in case of an api error -->\n        <div class=\"search-project-filter\" *ngIf=\"projectfilter && !error && projects?.length > 0\">\n            <button mat-button class=\"project-filter-btn\" [matMenuTriggerFor]=\"selectProject\" #btnToSelectProject=\"matMenuTrigger\" isIconButton>\n                <span class=\"label\">{{projectLabel}}</span>\n                <mat-icon class=\"icon\" matSuffix>keyboard_arrow_down</mat-icon>\n            </button>\n            <mat-menu #selectProject=\"matMenu\">\n                <button mat-menu-item class=\"center\" (click)=\"setProject();changeFocus()\">All Projects</button>\n                <mat-divider></mat-divider>\n                <button mat-menu-item *ngFor=\"let project of projects\"\n                        (click)=\"setProject(project);changeFocus()\">{{project.shortname}}</button>\n            </mat-menu>\n        </div>\n\n        <!--         <div>\n            <button class=\"prefix\" (click)=\"doSearch(search)\">\n                <mat-icon>search</mat-icon>\n            </button>\n        </div> -->\n\n        <div class=\"input-field\">\n            <input #search autocomplete=\"off\" type=\"search\" [placeholder]=\"searchLabel\" [(ngModel)]=\"searchQuery\" minlength=\"3\"\n                   [class.with-project-filter]=\"projectfilter && !error && projects?.length > 0\" name=\"search\" (keyup.esc)=\"resetSearch(search)\" [autofocus]=\"focusOnSimple === 'active'\"\n                   (keyup)=\"onKey(search, $event)\" (click)=\"setFocus()\" (focus)=\"toggleMenu()\" />\n        </div>\n\n        <!-- switch button: on some focus we need a close button for the simple -->\n        <!-- <div>\n            <button class=\"suffix\" *ngIf=\"focusOnSimple === 'active'\" (click)=\"resetSearch(search)\">\n                <mat-icon>close</mat-icon>\n            </button>\n            <button class=\"suffix\" *ngIf=\"focusOnSimple === 'inactive'\"></button>\n        </div>\n -->\n        <div>\n            <button class=\"suffix\" (click)=\"doSearch()\">\n                <mat-icon>search</mat-icon>\n            </button>\n        </div>\n        <!-- \"dropdown\" menu for simple search -->\n        <div class=\"kui-menu simple-search\" [@fulltextSearchMenu]=\"focusOnSimple\" *ngIf=\"showSimpleSearch\"\n             [class.with-project-filter]=\"projectfilter && !error && projects?.length > 0\">\n            <mat-list class=\"kui-previous-search-list\">\n                <mat-list-item *ngFor=\"let item of prevSearch | kuiReverse; let i=index\">\n                    <h4 mat-line *ngIf=\"i<10\" (click)=\"doPrevSearch(item)\" class=\"kui-previous-search-item\">\n                        <div class=\"project-filter-btn\" [class.not-empty]=\"item.projectIri\" *ngIf=\"projectfilter && !error && projects?.length > 0\">\n                            <span *ngIf=\"item.projectIri\" class=\"project-filter-label\">{{item.projectLabel}}</span>\n                        </div>\n                        <div class=\"search-query\">\n                            {{item.query}}\n                        </div>\n                    </h4>\n                    <button mat-icon-button (click)=\"resetPrevSearch(item)\">\n                        <mat-icon aria-label=\"close\">close</mat-icon>\n                    </button>\n                </mat-list-item>\n            </mat-list>\n            <button mat-stroked-button color=\"accent\" class=\"right\" (click)=\"resetPrevSearch()\"\n                    *ngIf=\"prevSearch\">Clear</button>\n        </div>\n\n    </div>\n</div>\n",
                    animations: [
                        trigger('fulltextSearchMenu', [
                            state('inactive', style({ display: 'none' })),
                            state('active', style({ display: 'block' })),
                            transition('inactive => active', animate('100ms ease-in')),
                            transition('active => inactive', animate('100ms ease-out'))
                        ])
                    ],
                    styles: ["input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration,input[type=search]::-webkit-search-results-button,input[type=search]::-webkit-search-results-decoration{display:none}input[type=search]{-moz-appearance:none;-webkit-appearance:none}.full-width{width:100%}.close{right:12px}.hide{display:none}.show{display:block}.search-bar-elements{display:flex;position:relative;z-index:100}.inactive{color:#7a7a7a}.fulltext-search-bar{background-color:#f9f9f9;border-radius:4px;display:inline-flex;height:40px;position:relative;width:480px;z-index:10}.fulltext-search-bar.with-project-filter{width:calc(480px + 160px)}.fulltext-search-bar:hover{box-shadow:0 1px 3px rgba(0,0,0,.5)}.fulltext-search-bar .input-field{flex:1}.fulltext-search-bar .input-field input{border-style:none;font-size:14pt;height:38px;margin:1px;position:absolute;padding-left:12px;width:calc(100% - 40px)}.fulltext-search-bar .input-field input.with-project-filter{width:calc(100% - 40px - 160px)}.fulltext-search-bar .input-field input:active,.fulltext-search-bar .input-field input:focus{outline:0}.fulltext-search-bar .prefix,.fulltext-search-bar .suffix{background-color:#fff;border-radius:3px;border-style:none;color:rgba(41,41,41,.4);cursor:pointer;height:38px;outline:0;position:relative;width:40px}.fulltext-search-bar .prefix:active,.fulltext-search-bar .suffix:active{color:#515151}.fulltext-search-bar.active{box-shadow:0 1px 3px rgba(0,0,0,.5)}.kui-menu{box-shadow:0 3px 5px -1px rgba(11,11,11,.2),0 6px 10px 0 rgba(11,11,11,.14),0 1px 18px 0 rgba(11,11,11,.12);background-color:#f9f9f9;border-radius:4px;position:absolute}.kui-menu.simple-search{min-height:480px;width:480px;padding-top:60px;z-index:-1}.kui-menu.simple-search.with-project-filter{width:calc(480px + 160px)}.kui-menu.simple-search .kui-previous-search-list .mat-list-item{cursor:pointer}.kui-menu.simple-search .kui-previous-search-list .mat-list-item:hover{background-color:#b8b8b8}.kui-menu.simple-search .kui-previous-search-list .mat-list-item:hover mat-icon{display:block}.kui-menu.simple-search .kui-previous-search-list .mat-list-item mat-icon{display:none}.kui-menu.simple-search .kui-previous-search-list .mat-list-item .kui-previous-search-item{display:inherit}.kui-menu.simple-search .kui-previous-search-list .mat-list-item .kui-previous-search-item .search-query{font-weight:700}.kui-menu.simple-search .right{margin-top:12px;margin-left:16px}@media screen and (max-width:1024px){.fulltext-search-bar{width:360px}.fulltext-search-bar .input-field input{width:calc(360px - 40px)}.kui-menu.simple-search{width:360px}}@media screen and (max-width:768px){.fulltext-search-bar{width:calc(360px - 160px)}.fulltext-search-bar div.input-field input{width:calc(360px - 160px - 40px)}.kui-menu.simple-search{width:calc(360px - 40px)}}.project-filter-btn{font-size:inherit;overflow:hidden;text-overflow:ellipsis;width:160px}.project-filter-btn.not-empty::before{content:\"[\"}.project-filter-btn.not-empty::after{content:\"]\"}.project-filter-btn .label{font-weight:400}.project-filter-btn .icon{vertical-align:middle;position:relative;top:-1px}"]
                }] }
    ];
    /** @nocollapse */
    FulltextSearchComponent.ctorParameters = function () { return [
        { type: ActivatedRoute },
        { type: Router },
        { type: ProjectsService }
    ]; };
    FulltextSearchComponent.propDecorators = {
        route: [{ type: Input }],
        projectfilter: [{ type: Input }],
        filterbyproject: [{ type: Input }],
        searchField: [{ type: ViewChild, args: ['search',] }],
        selectProject: [{ type: ViewChild, args: ['btnToSelectProject',] }]
    };
    return FulltextSearchComponent;
}());
export { FulltextSearchComponent };
//# sourceMappingURL=data:application/json;base64,