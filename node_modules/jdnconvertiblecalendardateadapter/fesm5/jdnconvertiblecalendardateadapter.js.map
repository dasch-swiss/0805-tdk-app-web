{"version":3,"file":"jdnconvertiblecalendardateadapter.js.map","sources":["ng://jdnconvertiblecalendardateadapter/lib/jdnconvertible-calendar-date-adapter.ts","ng://jdnconvertiblecalendardateadapter/lib/jdnconvertible-calendar-date-formats.ts","ng://jdnconvertiblecalendardateadapter/lib/jdnconvertible-calendar-date-adapter.module.ts"],"sourcesContent":["/*\n * Copyright Â© 2017 Lukas Rosenthaler, Benjamin Geer, Ivan Subotic,\n * Tobias Schweizer, AndrÃ© Kilchenmann, and Sepideh Alassi.\n *\n * This file is part of JDNConvertibleCalendarDateAdapter.\n *\n * JDNConvertibleCalendarDateAdapter is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published\n * by the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * JDNConvertibleCalendarDateAdapter is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public\n * License along with JDNConvertibleCalendarDateAdapter.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport {Injectable} from '@angular/core';\nimport {DateAdapter} from '@angular/material';\nimport {\n  CalendarDate,\n  CalendarPeriod,\n  GregorianCalendarDate,\n  JDNConvertibleCalendar,\n  JDNConvertibleConversionModule,\n  JDNPeriod,\n  JulianCalendarDate\n} from 'jdnconvertiblecalendar';\n\n\n@Injectable()\n/**\n * Implements `DateAdapter` for `JDNConvertibleCalendar`.\n *\n * `JDNConvertibleCalendar` supports periods (dates with different precisions), but here only exact days are supported for now.\n */\nexport class JDNConvertibleCalendarDateAdapter extends DateAdapter<JDNConvertibleCalendar> {\n\n  private static readonly DD_MM_YYYY = 'DD-MM-YYYY';\n\n  private static readonly MM_YYYY = 'MM-YYYY';\n\n  private static readonly displayDateFormats = [JDNConvertibleCalendarDateAdapter.DD_MM_YYYY, JDNConvertibleCalendarDateAdapter.MM_YYYY];\n\n  private static readonly parsableDateFormats = [JDNConvertibleCalendarDateAdapter.DD_MM_YYYY];\n\n  private static readonly dateFormatRegexes = {\n    'DD-MM-YYYY': new RegExp('^(\\\\d?\\\\d)-(\\\\d?\\\\d)-(\\\\d{4})')\n  };\n\n  // the currently active calendar format\n  private _activeCalendarFormat = 'Gregorian';\n\n  get activeCalendarFormat() {\n    return this._activeCalendarFormat;\n  }\n\n  /**\n   * Adds leading zeros to a given number and returns the resulting string.\n   *\n   * @param num the given number.\n   * @param digits the number of expected digits.\n   * @returns string containing leading zeros.\n   */\n  private static addLeadingZeroToNumber(num: number, digits: number): string {\n\n    const missingDigits = digits - String(num).length;\n\n    if (missingDigits > 0) {\n      let leadingZeros = '';\n      for (let i = 0; i < missingDigits; i++) {\n        leadingZeros += '0';\n      }\n\n      return `${leadingZeros}${num}`;\n\n    } else {\n      return String(num);\n    }\n\n  }\n\n  /**\n   * Converts the given date to the indicated calendar format.\n   *\n   * @param date the date to be converted.\n   * @param format the calendar format to convert to.\n   * @returns converted date.\n   */\n  convertCalendarFormat(date: JDNConvertibleCalendar, format: string): JDNConvertibleCalendar {\n\n    // another instance has to be returned, otherwise \"activeDate\" set method is not triggered for MatYearView\n\n    const dateMod = this.clone(date);\n\n    switch (format) {\n      case 'Gregorian':\n        this._activeCalendarFormat = 'Gregorian';\n        return dateMod.convertCalendar('Gregorian');\n\n      case 'Julian':\n        this._activeCalendarFormat = 'Julian';\n        return dateMod.convertCalendar('Julian');\n\n      default:\n        // invalid format\n        return dateMod;\n    }\n  }\n\n  getYear(date: JDNConvertibleCalendar): number {\n    return date.toCalendarPeriod().periodStart.year;\n  }\n\n  getMonth(date: JDNConvertibleCalendar): number {\n    // return 0 index based month\n    return date.toCalendarPeriod().periodStart.month - 1;\n  }\n\n  getDate(date: JDNConvertibleCalendar): number {\n    return date.toCalendarPeriod().periodStart.day;\n  }\n\n  getDayOfWeek(date: JDNConvertibleCalendar): number {\n\n    // dayOfWeek is an optional class member, but always set when returned by this method\n    const dayOfWeek: number | undefined = date.toCalendarPeriod().periodStart.dayOfWeek;\n\n    if (dayOfWeek !== undefined) {\n      return dayOfWeek;\n    } else {\n      throw new Error('day of week is not set although it should be');\n    }\n\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    // TODO: implement this properly, taking calendar format and locale into account\n    return ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n  }\n\n  getDateNames(): string[] {\n    // TODO: implement this properly, taking calendar format and locale into account\n    const dateNames: string[] = [];\n    for (let i = 1; i <= 31; i++) {\n      dateNames.push(String(i));\n    }\n\n    return dateNames;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow') {\n    // TODO: implement this properly, taking calendar format and locale into account\n    return ['Sun', 'Mon', 'Tue', 'Wed', 'Thur', 'Fri', 'Sat'];\n  }\n\n  getYearName(date: JDNConvertibleCalendar): string {\n    return String(date.toCalendarPeriod().periodStart.year);\n  }\n\n  getFirstDayOfWeek(): number {\n    // TODO: implement this properly, taking calendar format into account\n    return 0;\n  }\n\n  getNumDaysInMonth(date: JDNConvertibleCalendar): number {\n    const calendarPeriod = date.toCalendarPeriod();\n\n    return date.daysInMonth(calendarPeriod.periodStart);\n  }\n\n  clone(date: JDNConvertibleCalendar): JDNConvertibleCalendar {\n\n    const jdnPeriod = date.toJDNPeriod();\n\n    switch (this._activeCalendarFormat) {\n      case 'Gregorian':\n        return new GregorianCalendarDate(jdnPeriod);\n\n      case 'Julian':\n        return new JulianCalendarDate(jdnPeriod);\n    }\n\n  }\n\n  /**\n   * Creates a date in the specified calendar format.\n   *\n   * @param year the date's year.\n   * @param month the date's month (0-based index).\n   * @param date the date's day.\n   * @param calendar the calendar format to be used.\n   * @returns a date in the specified calendar format.\n   */\n  private createCalendarDate(year: number, month: number, date: number, calendar: string): JDNConvertibleCalendar {\n    // month param is 0 indexed, but we use 1 based index for months\n    const calDate = new CalendarDate(year, month + 1, date);\n\n    switch (calendar) {\n      case 'Gregorian':\n        return new GregorianCalendarDate(new CalendarPeriod(calDate, calDate));\n\n      case 'Julian':\n        return new JulianCalendarDate(new CalendarPeriod(calDate, calDate));\n    }\n  }\n\n  createDate(year: number, month: number, date: number): JDNConvertibleCalendar {\n\n    // create a date in the active calendar format\n    return this.createCalendarDate(year, month, date, this._activeCalendarFormat);\n\n  }\n\n  today(): JDNConvertibleCalendar {\n\n    // get today's date from the native JS Date object\n    const today: Date = new Date();\n\n    const year = today.getFullYear();\n\n    // 0 based month\n    const month = today.getMonth();\n\n    // day of month, 1 based index\n    const day = today.getDate();\n\n    // create a Gregorian calendar date from the native JS object\n    // month used a 1 based index\n    const calDate = new CalendarDate(year, month + 1, day);\n\n    const dateGregorian = new GregorianCalendarDate(new CalendarPeriod(calDate, calDate));\n\n    // convert the date to the active calendar format\n    const date: JDNConvertibleCalendar = this.convertCalendarFormat(dateGregorian, this._activeCalendarFormat);\n\n    return date;\n\n  }\n\n  parse(value: any, parseFormat: any): JDNConvertibleCalendar | null {\n\n    let date;\n    if (parseFormat !== undefined && typeof parseFormat === 'string' && JDNConvertibleCalendarDateAdapter.parsableDateFormats.indexOf(parseFormat) !== -1) {\n\n      switch (parseFormat) {\n        case JDNConvertibleCalendarDateAdapter.DD_MM_YYYY: {\n\n          const dateStringRegex = JDNConvertibleCalendarDateAdapter.dateFormatRegexes[parseFormat];\n\n          const parsed: Array<any> | null = dateStringRegex.exec(value);\n\n          if (parsed !== null) {\n\n            // index 0 is the whole match\n\n            // month index must be 0 based\n            date = this.createDate(parseInt(parsed[3]), parseInt(parsed[2]) - 1, parseInt(parsed[1]));\n            break;\n\n          } else {\n            console.log(`Error: parsing of date string failed: ${value}`);\n            return null;\n          }\n        }\n        default: {\n          console.log(`Error: supported parsable format was not handled correctly: ${parseFormat}`);\n          return null;\n        }\n      }\n\n\n    } else {\n      console.log(`Error: unknown parseFormat ${parseFormat}`);\n      return null;\n    }\n\n    return date;\n  }\n\n  format(date: JDNConvertibleCalendar, displayFormat: any): string {\n    let dateString = '';\n    if (displayFormat !== undefined && typeof displayFormat === 'string' && JDNConvertibleCalendarDateAdapter.displayDateFormats.lastIndexOf(displayFormat) !== -1) {\n\n      const calendarPeriod = date.toCalendarPeriod();\n\n      switch (displayFormat) {\n\n        case JDNConvertibleCalendarDateAdapter.DD_MM_YYYY: {\n\n          dateString =\n            `${JDNConvertibleCalendarDateAdapter.addLeadingZeroToNumber(calendarPeriod.periodStart.day, 2)}-${JDNConvertibleCalendarDateAdapter.addLeadingZeroToNumber(calendarPeriod.periodStart.month, 2)}-${JDNConvertibleCalendarDateAdapter.addLeadingZeroToNumber(calendarPeriod.periodStart.year, 4)}`;\n          break;\n\n        }\n\n        case JDNConvertibleCalendarDateAdapter.MM_YYYY: {\n          dateString = `${JDNConvertibleCalendarDateAdapter.addLeadingZeroToNumber(calendarPeriod.periodStart.month, 2)}-${JDNConvertibleCalendarDateAdapter.addLeadingZeroToNumber(calendarPeriod.periodStart.year, 4)}`;\n          break;\n        }\n\n        default: {\n          console.log(`Error: supported display format was not handled correctly: ${displayFormat}`);\n        }\n\n      }\n\n    } else {\n      console.log(`Error: unknown displayFormat ${displayFormat}`);\n    }\n\n    return dateString;\n  }\n\n  addCalendarYears(date: JDNConvertibleCalendar, years: number): JDNConvertibleCalendar {\n\n    // another instance has to be returned, otherwise \"activeDate\" set method is not triggered for MatYearView\n\n    const dateMod = this.clone(date);\n\n    dateMod.transposePeriodByYear(years);\n\n    return dateMod;\n\n  }\n\n  addCalendarMonths(date: JDNConvertibleCalendar, months: number): JDNConvertibleCalendar {\n\n    // another instance has to be returned, otherwise \"activeDate\" set method is not triggered for MatMonthView\n\n    const dateMod = this.clone(date);\n\n    dateMod.transposePeriodByMonth(months);\n\n    return dateMod;\n  }\n\n  addCalendarDays(date: JDNConvertibleCalendar, days: number): JDNConvertibleCalendar {\n\n    // another instance has to be returned, otherwise events do not work correctly\n\n    const dateMod = this.clone(date);\n\n    dateMod.transposePeriodByDay(days);\n\n    return dateMod;\n  }\n\n  toIso8601(date: JDNConvertibleCalendar) {\n\n    // use Gregorian\n    const gregorianCal = date.convertCalendar('Gregorian');\n\n    const gregorianCalPeriod = gregorianCal.toCalendarPeriod();\n\n    console.log('to iso');\n\n    return `${JDNConvertibleCalendarDateAdapter.addLeadingZeroToNumber(gregorianCalPeriod.periodStart.year, 4)}-${JDNConvertibleCalendarDateAdapter.addLeadingZeroToNumber(gregorianCalPeriod.periodStart.month, 2)}-${JDNConvertibleCalendarDateAdapter.addLeadingZeroToNumber(gregorianCalPeriod.periodStart.day, 2)}`;\n\n  }\n\n\n  isDateInstance(obj: any): boolean {\n    return (obj instanceof JDNConvertibleCalendar);\n  }\n\n  isValid(date: JDNConvertibleCalendar): boolean {\n    // TODO: implement this properly\n\n    return true;\n  }\n\n  invalid(): JDNConvertibleCalendar {\n    // TODO: create an invalid instance? For testing?\n\n    return this.today();\n  }\n\n\n}\n","import {MatDateFormats} from '@angular/material';\n\n\nexport const MAT_JDN_DATE_FORMATS: MatDateFormats = {\n    parse: {\n        dateInput: 'DD-MM-YYYY'\n    },\n    display: {\n        dateInput: 'DD-MM-YYYY',\n        monthYearLabel: 'MM-YYYY',\n        dateA11yLabel: 'DD-MM-YYYY',\n        monthYearA11yLabel: 'MM-YYYY'\n    }\n};","import {NgModule} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE} from '@angular/material';\nimport {JDNConvertibleCalendarDateAdapter} from './jdnconvertible-calendar-date-adapter';\nimport {MAT_JDN_DATE_FORMATS} from './jdnconvertible-calendar-date-formats';\n\n\n@NgModule({\n  providers: [\n    {provide: DateAdapter, useClass: JDNConvertibleCalendarDateAdapter, deps: [MAT_DATE_LOCALE]}\n  ]\n})\nexport class JDNConvertibleCalendarDateAdapterModule {\n}\n\n@NgModule({\n  imports: [JDNConvertibleCalendarDateAdapterModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_JDN_DATE_FORMATS}],\n})\nexport class MatJDNConvertibleCalendarDateAdapterModule {\n}\n\nexport {JDNConvertibleCalendarDateAdapter} from './jdnconvertible-calendar-date-adapter';\n\n"],"names":["tslib_1.__extends"],"mappings":"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"}
