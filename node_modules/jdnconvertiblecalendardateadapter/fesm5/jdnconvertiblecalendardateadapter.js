import { __extends } from 'tslib';
import { Injectable, NgModule } from '@angular/core';
import { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '@angular/material';
import { CalendarDate, CalendarPeriod, GregorianCalendarDate, JDNConvertibleCalendar, JulianCalendarDate } from 'jdnconvertiblecalendar';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var JDNConvertibleCalendarDateAdapter = /** @class */ (function (_super) {
    __extends(JDNConvertibleCalendarDateAdapter, _super);
    function JDNConvertibleCalendarDateAdapter() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // the currently active calendar format
        _this._activeCalendarFormat = 'Gregorian';
        return _this;
    }
    Object.defineProperty(JDNConvertibleCalendarDateAdapter.prototype, "activeCalendarFormat", {
        get: /**
         * @return {?}
         */
        function () {
            return this._activeCalendarFormat;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Adds leading zeros to a given number and returns the resulting string.
     *
     * @param num the given number.
     * @param digits the number of expected digits.
     * @returns string containing leading zeros.
     */
    /**
     * Adds leading zeros to a given number and returns the resulting string.
     *
     * @private
     * @param {?} num the given number.
     * @param {?} digits the number of expected digits.
     * @return {?} string containing leading zeros.
     */
    JDNConvertibleCalendarDateAdapter.addLeadingZeroToNumber = /**
     * Adds leading zeros to a given number and returns the resulting string.
     *
     * @private
     * @param {?} num the given number.
     * @param {?} digits the number of expected digits.
     * @return {?} string containing leading zeros.
     */
    function (num, digits) {
        /** @type {?} */
        var missingDigits = digits - String(num).length;
        if (missingDigits > 0) {
            /** @type {?} */
            var leadingZeros = '';
            for (var i = 0; i < missingDigits; i++) {
                leadingZeros += '0';
            }
            return "" + leadingZeros + num;
        }
        else {
            return String(num);
        }
    };
    /**
     * Converts the given date to the indicated calendar format.
     *
     * @param date the date to be converted.
     * @param format the calendar format to convert to.
     * @returns converted date.
     */
    /**
     * Converts the given date to the indicated calendar format.
     *
     * @param {?} date the date to be converted.
     * @param {?} format the calendar format to convert to.
     * @return {?} converted date.
     */
    JDNConvertibleCalendarDateAdapter.prototype.convertCalendarFormat = /**
     * Converts the given date to the indicated calendar format.
     *
     * @param {?} date the date to be converted.
     * @param {?} format the calendar format to convert to.
     * @return {?} converted date.
     */
    function (date, format) {
        // another instance has to be returned, otherwise "activeDate" set method is not triggered for MatYearView
        // another instance has to be returned, otherwise "activeDate" set method is not triggered for MatYearView
        /** @type {?} */
        var dateMod = this.clone(date);
        switch (format) {
            case 'Gregorian':
                this._activeCalendarFormat = 'Gregorian';
                return dateMod.convertCalendar('Gregorian');
            case 'Julian':
                this._activeCalendarFormat = 'Julian';
                return dateMod.convertCalendar('Julian');
            default:
                // invalid format
                return dateMod;
        }
    };
    /**
     * @param {?} date
     * @return {?}
     */
    JDNConvertibleCalendarDateAdapter.prototype.getYear = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return date.toCalendarPeriod().periodStart.year;
    };
    /**
     * @param {?} date
     * @return {?}
     */
    JDNConvertibleCalendarDateAdapter.prototype.getMonth = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        // return 0 index based month
        return date.toCalendarPeriod().periodStart.month - 1;
    };
    /**
     * @param {?} date
     * @return {?}
     */
    JDNConvertibleCalendarDateAdapter.prototype.getDate = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return date.toCalendarPeriod().periodStart.day;
    };
    /**
     * @param {?} date
     * @return {?}
     */
    JDNConvertibleCalendarDateAdapter.prototype.getDayOfWeek = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        // dayOfWeek is an optional class member, but always set when returned by this method
        /** @type {?} */
        var dayOfWeek = date.toCalendarPeriod().periodStart.dayOfWeek;
        if (dayOfWeek !== undefined) {
            return dayOfWeek;
        }
        else {
            throw new Error('day of week is not set although it should be');
        }
    };
    /**
     * @param {?} style
     * @return {?}
     */
    JDNConvertibleCalendarDateAdapter.prototype.getMonthNames = /**
     * @param {?} style
     * @return {?}
     */
    function (style) {
        // TODO: implement this properly, taking calendar format and locale into account
        return ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];
    };
    /**
     * @return {?}
     */
    JDNConvertibleCalendarDateAdapter.prototype.getDateNames = /**
     * @return {?}
     */
    function () {
        // TODO: implement this properly, taking calendar format and locale into account
        /** @type {?} */
        var dateNames = [];
        for (var i = 1; i <= 31; i++) {
            dateNames.push(String(i));
        }
        return dateNames;
    };
    /**
     * @param {?} style
     * @return {?}
     */
    JDNConvertibleCalendarDateAdapter.prototype.getDayOfWeekNames = /**
     * @param {?} style
     * @return {?}
     */
    function (style) {
        // TODO: implement this properly, taking calendar format and locale into account
        return ['Sun', 'Mon', 'Tue', 'Wed', 'Thur', 'Fri', 'Sat'];
    };
    /**
     * @param {?} date
     * @return {?}
     */
    JDNConvertibleCalendarDateAdapter.prototype.getYearName = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return String(date.toCalendarPeriod().periodStart.year);
    };
    /**
     * @return {?}
     */
    JDNConvertibleCalendarDateAdapter.prototype.getFirstDayOfWeek = /**
     * @return {?}
     */
    function () {
        // TODO: implement this properly, taking calendar format into account
        return 0;
    };
    /**
     * @param {?} date
     * @return {?}
     */
    JDNConvertibleCalendarDateAdapter.prototype.getNumDaysInMonth = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var calendarPeriod = date.toCalendarPeriod();
        return date.daysInMonth(calendarPeriod.periodStart);
    };
    /**
     * @param {?} date
     * @return {?}
     */
    JDNConvertibleCalendarDateAdapter.prototype.clone = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var jdnPeriod = date.toJDNPeriod();
        switch (this._activeCalendarFormat) {
            case 'Gregorian':
                return new GregorianCalendarDate(jdnPeriod);
            case 'Julian':
                return new JulianCalendarDate(jdnPeriod);
        }
    };
    /**
     * Creates a date in the specified calendar format.
     *
     * @param year the date's year.
     * @param month the date's month (0-based index).
     * @param date the date's day.
     * @param calendar the calendar format to be used.
     * @returns a date in the specified calendar format.
     */
    /**
     * Creates a date in the specified calendar format.
     *
     * @private
     * @param {?} year the date's year.
     * @param {?} month the date's month (0-based index).
     * @param {?} date the date's day.
     * @param {?} calendar the calendar format to be used.
     * @return {?} a date in the specified calendar format.
     */
    JDNConvertibleCalendarDateAdapter.prototype.createCalendarDate = /**
     * Creates a date in the specified calendar format.
     *
     * @private
     * @param {?} year the date's year.
     * @param {?} month the date's month (0-based index).
     * @param {?} date the date's day.
     * @param {?} calendar the calendar format to be used.
     * @return {?} a date in the specified calendar format.
     */
    function (year, month, date, calendar) {
        // month param is 0 indexed, but we use 1 based index for months
        /** @type {?} */
        var calDate = new CalendarDate(year, month + 1, date);
        switch (calendar) {
            case 'Gregorian':
                return new GregorianCalendarDate(new CalendarPeriod(calDate, calDate));
            case 'Julian':
                return new JulianCalendarDate(new CalendarPeriod(calDate, calDate));
        }
    };
    /**
     * @param {?} year
     * @param {?} month
     * @param {?} date
     * @return {?}
     */
    JDNConvertibleCalendarDateAdapter.prototype.createDate = /**
     * @param {?} year
     * @param {?} month
     * @param {?} date
     * @return {?}
     */
    function (year, month, date) {
        // create a date in the active calendar format
        return this.createCalendarDate(year, month, date, this._activeCalendarFormat);
    };
    /**
     * @return {?}
     */
    JDNConvertibleCalendarDateAdapter.prototype.today = /**
     * @return {?}
     */
    function () {
        // get today's date from the native JS Date object
        /** @type {?} */
        var today = new Date();
        /** @type {?} */
        var year = today.getFullYear();
        // 0 based month
        /** @type {?} */
        var month = today.getMonth();
        // day of month, 1 based index
        /** @type {?} */
        var day = today.getDate();
        // create a Gregorian calendar date from the native JS object
        // month used a 1 based index
        /** @type {?} */
        var calDate = new CalendarDate(year, month + 1, day);
        /** @type {?} */
        var dateGregorian = new GregorianCalendarDate(new CalendarPeriod(calDate, calDate));
        // convert the date to the active calendar format
        /** @type {?} */
        var date = this.convertCalendarFormat(dateGregorian, this._activeCalendarFormat);
        return date;
    };
    /**
     * @param {?} value
     * @param {?} parseFormat
     * @return {?}
     */
    JDNConvertibleCalendarDateAdapter.prototype.parse = /**
     * @param {?} value
     * @param {?} parseFormat
     * @return {?}
     */
    function (value, parseFormat) {
        /** @type {?} */
        var date;
        if (parseFormat !== undefined && typeof parseFormat === 'string' && JDNConvertibleCalendarDateAdapter.parsableDateFormats.indexOf(parseFormat) !== -1) {
            switch (parseFormat) {
                case JDNConvertibleCalendarDateAdapter.DD_MM_YYYY: {
                    /** @type {?} */
                    var dateStringRegex = JDNConvertibleCalendarDateAdapter.dateFormatRegexes[parseFormat];
                    /** @type {?} */
                    var parsed = dateStringRegex.exec(value);
                    if (parsed !== null) {
                        // index 0 is the whole match
                        // month index must be 0 based
                        date = this.createDate(parseInt(parsed[3]), parseInt(parsed[2]) - 1, parseInt(parsed[1]));
                        break;
                    }
                    else {
                        console.log("Error: parsing of date string failed: " + value);
                        return null;
                    }
                }
                default: {
                    console.log("Error: supported parsable format was not handled correctly: " + parseFormat);
                    return null;
                }
            }
        }
        else {
            console.log("Error: unknown parseFormat " + parseFormat);
            return null;
        }
        return date;
    };
    /**
     * @param {?} date
     * @param {?} displayFormat
     * @return {?}
     */
    JDNConvertibleCalendarDateAdapter.prototype.format = /**
     * @param {?} date
     * @param {?} displayFormat
     * @return {?}
     */
    function (date, displayFormat) {
        /** @type {?} */
        var dateString = '';
        if (displayFormat !== undefined && typeof displayFormat === 'string' && JDNConvertibleCalendarDateAdapter.displayDateFormats.lastIndexOf(displayFormat) !== -1) {
            /** @type {?} */
            var calendarPeriod = date.toCalendarPeriod();
            switch (displayFormat) {
                case JDNConvertibleCalendarDateAdapter.DD_MM_YYYY: {
                    dateString =
                        JDNConvertibleCalendarDateAdapter.addLeadingZeroToNumber(calendarPeriod.periodStart.day, 2) + "-" + JDNConvertibleCalendarDateAdapter.addLeadingZeroToNumber(calendarPeriod.periodStart.month, 2) + "-" + JDNConvertibleCalendarDateAdapter.addLeadingZeroToNumber(calendarPeriod.periodStart.year, 4);
                    break;
                }
                case JDNConvertibleCalendarDateAdapter.MM_YYYY: {
                    dateString = JDNConvertibleCalendarDateAdapter.addLeadingZeroToNumber(calendarPeriod.periodStart.month, 2) + "-" + JDNConvertibleCalendarDateAdapter.addLeadingZeroToNumber(calendarPeriod.periodStart.year, 4);
                    break;
                }
                default: {
                    console.log("Error: supported display format was not handled correctly: " + displayFormat);
                }
            }
        }
        else {
            console.log("Error: unknown displayFormat " + displayFormat);
        }
        return dateString;
    };
    /**
     * @param {?} date
     * @param {?} years
     * @return {?}
     */
    JDNConvertibleCalendarDateAdapter.prototype.addCalendarYears = /**
     * @param {?} date
     * @param {?} years
     * @return {?}
     */
    function (date, years) {
        // another instance has to be returned, otherwise "activeDate" set method is not triggered for MatYearView
        // another instance has to be returned, otherwise "activeDate" set method is not triggered for MatYearView
        /** @type {?} */
        var dateMod = this.clone(date);
        dateMod.transposePeriodByYear(years);
        return dateMod;
    };
    /**
     * @param {?} date
     * @param {?} months
     * @return {?}
     */
    JDNConvertibleCalendarDateAdapter.prototype.addCalendarMonths = /**
     * @param {?} date
     * @param {?} months
     * @return {?}
     */
    function (date, months) {
        // another instance has to be returned, otherwise "activeDate" set method is not triggered for MatMonthView
        // another instance has to be returned, otherwise "activeDate" set method is not triggered for MatMonthView
        /** @type {?} */
        var dateMod = this.clone(date);
        dateMod.transposePeriodByMonth(months);
        return dateMod;
    };
    /**
     * @param {?} date
     * @param {?} days
     * @return {?}
     */
    JDNConvertibleCalendarDateAdapter.prototype.addCalendarDays = /**
     * @param {?} date
     * @param {?} days
     * @return {?}
     */
    function (date, days) {
        // another instance has to be returned, otherwise events do not work correctly
        // another instance has to be returned, otherwise events do not work correctly
        /** @type {?} */
        var dateMod = this.clone(date);
        dateMod.transposePeriodByDay(days);
        return dateMod;
    };
    /**
     * @param {?} date
     * @return {?}
     */
    JDNConvertibleCalendarDateAdapter.prototype.toIso8601 = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        // use Gregorian
        /** @type {?} */
        var gregorianCal = date.convertCalendar('Gregorian');
        /** @type {?} */
        var gregorianCalPeriod = gregorianCal.toCalendarPeriod();
        console.log('to iso');
        return JDNConvertibleCalendarDateAdapter.addLeadingZeroToNumber(gregorianCalPeriod.periodStart.year, 4) + "-" + JDNConvertibleCalendarDateAdapter.addLeadingZeroToNumber(gregorianCalPeriod.periodStart.month, 2) + "-" + JDNConvertibleCalendarDateAdapter.addLeadingZeroToNumber(gregorianCalPeriod.periodStart.day, 2);
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    JDNConvertibleCalendarDateAdapter.prototype.isDateInstance = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return (obj instanceof JDNConvertibleCalendar);
    };
    /**
     * @param {?} date
     * @return {?}
     */
    JDNConvertibleCalendarDateAdapter.prototype.isValid = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        // TODO: implement this properly
        return true;
    };
    /**
     * @return {?}
     */
    JDNConvertibleCalendarDateAdapter.prototype.invalid = /**
     * @return {?}
     */
    function () {
        // TODO: create an invalid instance? For testing?
        return this.today();
    };
    JDNConvertibleCalendarDateAdapter.DD_MM_YYYY = 'DD-MM-YYYY';
    JDNConvertibleCalendarDateAdapter.MM_YYYY = 'MM-YYYY';
    JDNConvertibleCalendarDateAdapter.displayDateFormats = [JDNConvertibleCalendarDateAdapter.DD_MM_YYYY, JDNConvertibleCalendarDateAdapter.MM_YYYY];
    JDNConvertibleCalendarDateAdapter.parsableDateFormats = [JDNConvertibleCalendarDateAdapter.DD_MM_YYYY];
    JDNConvertibleCalendarDateAdapter.dateFormatRegexes = {
        'DD-MM-YYYY': new RegExp('^(\\d?\\d)-(\\d?\\d)-(\\d{4})')
    };
    JDNConvertibleCalendarDateAdapter.decorators = [
        { type: Injectable }
    ];
    return JDNConvertibleCalendarDateAdapter;
}(DateAdapter));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var MAT_JDN_DATE_FORMATS = {
    parse: {
        dateInput: 'DD-MM-YYYY'
    },
    display: {
        dateInput: 'DD-MM-YYYY',
        monthYearLabel: 'MM-YYYY',
        dateA11yLabel: 'DD-MM-YYYY',
        monthYearA11yLabel: 'MM-YYYY'
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var JDNConvertibleCalendarDateAdapterModule = /** @class */ (function () {
    function JDNConvertibleCalendarDateAdapterModule() {
    }
    JDNConvertibleCalendarDateAdapterModule.decorators = [
        { type: NgModule, args: [{
                    providers: [
                        { provide: DateAdapter, useClass: JDNConvertibleCalendarDateAdapter, deps: [MAT_DATE_LOCALE] }
                    ]
                },] }
    ];
    return JDNConvertibleCalendarDateAdapterModule;
}());
var ɵ0 = MAT_JDN_DATE_FORMATS;
var MatJDNConvertibleCalendarDateAdapterModule = /** @class */ (function () {
    function MatJDNConvertibleCalendarDateAdapterModule() {
    }
    MatJDNConvertibleCalendarDateAdapterModule.decorators = [
        { type: NgModule, args: [{
                    imports: [JDNConvertibleCalendarDateAdapterModule],
                    providers: [{ provide: MAT_DATE_FORMATS, useValue: ɵ0 }],
                },] }
    ];
    return MatJDNConvertibleCalendarDateAdapterModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { JDNConvertibleCalendarDateAdapterModule, MatJDNConvertibleCalendarDateAdapterModule, JDNConvertibleCalendarDateAdapter, MAT_JDN_DATE_FORMATS as ɵa };

//# sourceMappingURL=jdnconvertiblecalendardateadapter.js.map