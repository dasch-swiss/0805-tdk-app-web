import { DateAdapter } from '@angular/material';
import { JDNConvertibleCalendar } from 'jdnconvertiblecalendar';
export declare class JDNConvertibleCalendarDateAdapter extends DateAdapter<JDNConvertibleCalendar> {
    private static readonly DD_MM_YYYY;
    private static readonly MM_YYYY;
    private static readonly displayDateFormats;
    private static readonly parsableDateFormats;
    private static readonly dateFormatRegexes;
    private _activeCalendarFormat;
    readonly activeCalendarFormat: string;
    /**
     * Adds leading zeros to a given number and returns the resulting string.
     *
     * @param num the given number.
     * @param digits the number of expected digits.
     * @returns string containing leading zeros.
     */
    private static addLeadingZeroToNumber;
    /**
     * Converts the given date to the indicated calendar format.
     *
     * @param date the date to be converted.
     * @param format the calendar format to convert to.
     * @returns converted date.
     */
    convertCalendarFormat(date: JDNConvertibleCalendar, format: string): JDNConvertibleCalendar;
    getYear(date: JDNConvertibleCalendar): number;
    getMonth(date: JDNConvertibleCalendar): number;
    getDate(date: JDNConvertibleCalendar): number;
    getDayOfWeek(date: JDNConvertibleCalendar): number;
    getMonthNames(style: 'long' | 'short' | 'narrow'): string[];
    getDateNames(): string[];
    getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];
    getYearName(date: JDNConvertibleCalendar): string;
    getFirstDayOfWeek(): number;
    getNumDaysInMonth(date: JDNConvertibleCalendar): number;
    clone(date: JDNConvertibleCalendar): JDNConvertibleCalendar;
    /**
     * Creates a date in the specified calendar format.
     *
     * @param year the date's year.
     * @param month the date's month (0-based index).
     * @param date the date's day.
     * @param calendar the calendar format to be used.
     * @returns a date in the specified calendar format.
     */
    private createCalendarDate;
    createDate(year: number, month: number, date: number): JDNConvertibleCalendar;
    today(): JDNConvertibleCalendar;
    parse(value: any, parseFormat: any): JDNConvertibleCalendar | null;
    format(date: JDNConvertibleCalendar, displayFormat: any): string;
    addCalendarYears(date: JDNConvertibleCalendar, years: number): JDNConvertibleCalendar;
    addCalendarMonths(date: JDNConvertibleCalendar, months: number): JDNConvertibleCalendar;
    addCalendarDays(date: JDNConvertibleCalendar, days: number): JDNConvertibleCalendar;
    toIso8601(date: JDNConvertibleCalendar): string;
    isDateInstance(obj: any): boolean;
    isValid(date: JDNConvertibleCalendar): boolean;
    invalid(): JDNConvertibleCalendar;
}
